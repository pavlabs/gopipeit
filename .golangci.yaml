output:
  # colored-line-number|line-number|json|tab|checkstyle|code-climate, default is "colored-line-number"
  format: colored-line-number

  # sorts results by: filepath, line and column
  sort-results: true

linters-settings:
  lll:
    line-length: 150

linters:
  # disable all linters by default and enable only linters that are explicitly mentioned
  disable-all: true
  enable:
    - asciicheck       # Simple linter to check that your code does not contain non-ASCII identifiers
    - bodyclose        # checks whether HTTP response body is closed and a re-use of TCP connection is not blocked
    - depguard         # Go linter that checks if package imports are in a list of acceptable packages
    - dogsled          # Checks assignments with too many blank identifiers (e.g. x, , , _, := f())
    - dupl             # Tool for code clone detection
    - errcheck         # Errcheck is a program for checking for unchecked errors in go programs. These unchecked errors can be critical bugs in some cases
    - errname          # Checks that sentinel errors are prefixed with the Err and error types are suffixed with the Error.
    - exhaustive       # check exhaustiveness of enum switch statements
    - exportloopref    # checks for pointers to enclosing loop variables
    - gosimple         # (megacheck) Linter for Go source code that specializes in simplifying a code
    - govet            # (vet, vetshadow) Vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
    - ineffassign      # Detects when assignments to existing variables are not used
    - staticcheck      # (megacheck) Staticcheck is a go vet on steroids, applying a ton of static analysis checks
    - typecheck        # Like the front-end of a Go compiler, parses and type-checks Go code
    - unused          # (megacheck) Checks Go code for unused constants, variables, functions and types [fast: false, auto-fix: false]
    - lll              # Reports long lines
    - goconst          # Finds repeated strings that could be replaced by a constant
    - gocritic         # Provides many diagnostics that check for bugs, performance and style issues.
    - gocyclo          # Computes and checks the cyclomatic complexity of functions
    - gofmt            # Gofmt checks whether code was gofmt-ed. By default this tool runs with -s option to check for code simplification
    - goheader         # Checks is file header matches to pattern
    - goimports        # Goimports does everything that gofmt does. Additionally it checks unused imports
    - gomodguard       # Allow and block list linter for direct Go module dependencies. This is different from depguard where there are different block types for example version constraints and module recommendations.
    - gosec            # Inspects source code for security problems
    - makezero         # Finds slice declarations with non-zero initial length, and are later used with append
    - misspell         # Finds commonly misspelled English words in comments
    - nestif           # Reports deeply nested if statements
    - nilerr           # Finds the code that returns nil even if it checks that the error is not nil.
    - noctx            # noctx finds sending http request without context.Context
    - nolintlint       # Reports ill-formed or insufficient nolint directives
    - prealloc         # Finds slice declarations that could potentially be preallocated
    - rowserrcheck     # checks whether Err of rows is checked successfully
    - unconvert        # Remove unnecessary type conversions
    - wastedassign     # Finds wasted assignment statements
    - whitespace       # Tool for detection of leading and trailing whitespace

run:
  concurrency: 2

  # deadline: 15m
  # timeout for analysis
  timeout:  15m

  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1

  # include test files or not, default is true
  tests: true

  # default is true. Enables skipping of directories:
  #   vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  skip-dirs-use-default: true

  # It is passed to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  modules-download-mode: readonly

  go: "1.19"
